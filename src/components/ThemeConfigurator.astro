---
import siteConfig from "../config/site.json";
---

<button
  id="config-toggle"
  class="fixed bottom-4 right-4 sm:top-4 sm:bottom-auto p-2 rounded-lg bg-white dark:bg-neutral-800 hover:opacity-80 transition-colors shadow-lg z-50"
  aria-label="Toggle theme configurator"
>
  <svg
    class="w-5 h-5 text-gray-700 dark:text-gray-300"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
    ></path>
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
  </svg>
</button>

<div
  id="theme-config"
  class="fixed bottom-16 right-4 sm:bottom-auto sm:top-4 p-3 sm:p-4 bg-white dark:bg-neutral-800 rounded-xl shadow-lg transform scale-0 opacity-0 transition-all duration-200 origin-bottom-right sm:origin-top-right z-40 w-[200px] sm:w-[280px]"
>
  <button
    id="close-config"
    class="absolute top-2 right-2 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition-colors"
    aria-label="Close theme configurator"
  >
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M6 18L18 6M6 6l12 12"></path>
    </svg>
  </button>

  <div class="mb-3 sm:mb-4">
    <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
      Theme
    </h3>
    <div class="flex gap-2">
      <button
        class="theme-btn p-2 rounded-lg bg-gray-100 dark:bg-neutral-700 hover:opacity-80 transition-colors"
        data-theme="light"
        aria-label="Light theme"
      >
        <svg
          class="w-5 h-5 text-amber-500"
          fill="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
          ></path>
        </svg>
      </button>
      <button
        class="theme-btn p-2 rounded-lg bg-gray-100 dark:bg-neutral-700 hover:opacity-80 transition-colors"
        data-theme="dark"
        aria-label="Dark theme"
      >
        <svg
          class="w-5 h-5 text-blue-400"
          fill="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
          ></path>
        </svg>
      </button>
    </div>
  </div>

  <div>
    <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
      Accent
    </h3>
    <div class="flex flex-wrap gap-2">
      {
        siteConfig.accentColors.map((color) => (
          <button
            class="color-btn w-6 h-6 rounded-full hover:opacity-80 transition-opacity border-2 border-transparent"
            style={`background-color: ${color.value};`}
            data-color={color.value}
            aria-label={`${color.name} accent`}
          />
        ))
      }
    </div>
  </div>
</div>

<script>
  import siteConfig from "../config/site.json";

  const root = document.documentElement;
  const themeButtons: NodeListOf<HTMLButtonElement> =
    document.querySelectorAll(".theme-btn");
  const colorButtons: NodeListOf<HTMLButtonElement> =
    document.querySelectorAll(".color-btn");
  const configToggle: HTMLElement | null =
    document.getElementById("config-toggle");
  const themeConfig: HTMLElement | null =
    document.getElementById("theme-config");
  const closeButton = document.getElementById("close-config");

  // Initialize from localStorage or defaults
  const currentTheme = localStorage.getItem("theme") || "light";
  const currentAccent = localStorage.getItem("accent-color") || "#FF5733";

  // Set initial theme
  if (currentTheme === "dark") {
    root.classList.add("dark");
  }

  // Set initial accent color
  root.style.setProperty("--accent-light", currentAccent);
  root.style.setProperty("--accent-dark", adjustColor(currentAccent, 20));

  // Update active states
  updateActiveStates();

  // Modified toggle behavior for mobile
  configToggle?.addEventListener("click", () => {
    const isVisible = themeConfig?.classList.contains("scale-100");
    if (isVisible) {
      themeConfig?.classList.remove("scale-100", "opacity-100");
      themeConfig?.classList.add("scale-0", "opacity-0");
      configToggle.classList.remove("sm:translate-x-[19rem]");
    } else {
      themeConfig?.classList.remove("scale-0", "opacity-0");
      themeConfig?.classList.add("scale-100", "opacity-100");
      configToggle.classList.add("sm:translate-x-[19rem]");
    }
  });

  // Theme button listeners
  themeButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      const theme = btn.dataset.theme;
      if (theme === "dark") {
        root.classList.add("dark");
      } else {
        root.classList.remove("dark");
      }
      localStorage.setItem("theme", theme || "light");
      updateActiveStates();
    });
  });

  // Color button listeners
  colorButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      const color = btn.dataset.color || siteConfig.accentColors[0].value;
      root.style.setProperty("--accent-light", color);
      root.style.setProperty("--accent-dark", adjustColor(color, 20));
      localStorage.setItem("accent-color", color);
      updateActiveStates();
    });
  });

  // Add close button listener
  closeButton?.addEventListener("click", () => {
    themeConfig?.classList.remove("scale-100", "opacity-100");
    themeConfig?.classList.add("scale-0", "opacity-0");
    configToggle?.classList.remove("sm:translate-x-[19rem]");
  });

  // Helper to update active states
  function updateActiveStates() {
    const isDark = root.classList.contains("dark");
    const currentColor = localStorage.getItem("accent-color");

    themeButtons.forEach((btn) => {
      const isActive = (btn.dataset.theme === "dark") === isDark;
      btn.classList.toggle("ring-2", isActive);
      btn.classList.toggle("ring-offset-2", isActive);
      btn.classList.toggle("ring-accent-light", isActive);
    });

    colorButtons.forEach((btn) => {
      const isActive = btn.dataset.color === currentColor;
      btn.classList.toggle("ring-2", isActive);
      btn.classList.toggle("ring-offset-2", isActive);
      btn.classList.toggle("ring-gray-400", isActive);
    });
  }

  // Helper to lighten/darken colors
  function adjustColor(color: string, amount: number) {
    const hex = color.replace("#", "");
    const num = parseInt(hex, 16);
    const r = Math.min(255, Math.max(0, (num >> 16) + amount));
    const g = Math.min(255, Math.max(0, ((num >> 8) & 0x00ff) + amount));
    const b = Math.min(255, Math.max(0, (num & 0x0000ff) + amount));
    return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, "0")}`;
  }
</script>
